// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using HttpPrueba;
//
//    var iPedidoCosbiomeDb = IPedidoCosbiomeDb.FromJson(jsonString);

namespace HttpPrueba
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class IPedidoCosbiomeDb
    {
        [JsonProperty("abono", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Abono { get; set; }

        [JsonProperty("apartado", NullValueHandling = NullValueHandling.Ignore)]
        public long? Apartado { get; set; }

        [JsonProperty("estatus", NullValueHandling = NullValueHandling.Ignore)]
        public string Estatus { get; set; }

        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("published_at", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PublishedAt { get; set; }

        [JsonProperty("vendedor", NullValueHandling = NullValueHandling.Ignore)]
        public string Vendedor { get; set; }

        [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [JsonProperty("subTotal", NullValueHandling = NullValueHandling.Ignore)]
        public long? SubTotal { get; set; }

        [JsonProperty("referencia", NullValueHandling = NullValueHandling.Ignore)]
        public string Referencia { get; set; }

        [JsonProperty("productosCompra", NullValueHandling = NullValueHandling.Ignore)]
        public ProductosCompra[] ProductosCompra { get; set; }

        [JsonProperty("numTel", NullValueHandling = NullValueHandling.Ignore)]
        public string NumTel { get; set; }

        [JsonProperty("nota", NullValueHandling = NullValueHandling.Ignore)]
        public string Nota { get; set; }

        [JsonProperty("nombreCliente", NullValueHandling = NullValueHandling.Ignore)]
        public string NombreCliente { get; set; }

        [JsonProperty("metodoDePago", NullValueHandling = NullValueHandling.Ignore)]
        public string MetodoDePago { get; set; }

        [JsonProperty("medio", NullValueHandling = NullValueHandling.Ignore)]
        public string Medio { get; set; }

        [JsonProperty("iva", NullValueHandling = NullValueHandling.Ignore)]
        public long? Iva { get; set; }

        [JsonProperty("idPedido", NullValueHandling = NullValueHandling.Ignore)]
        public string IdPedido { get; set; }

        [JsonProperty("idFirebase", NullValueHandling = NullValueHandling.Ignore)]
        public string IdFirebase { get; set; }

        [JsonProperty("idCliente", NullValueHandling = NullValueHandling.Ignore)]
        public string IdCliente { get; set; }

        [JsonProperty("horaVenta", NullValueHandling = NullValueHandling.Ignore)]
        public string HoraVenta { get; set; }

        [JsonProperty("fechaVenta", NullValueHandling = NullValueHandling.Ignore)]
        public string FechaVenta { get; set; }

        [JsonProperty("fechaDeEntrega", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? FechaDeEntrega { get; set; }

        [JsonProperty("direccion", NullValueHandling = NullValueHandling.Ignore)]
        public Direccion Direccion { get; set; }

        [JsonProperty("de", NullValueHandling = NullValueHandling.Ignore)]
        public string De { get; set; }

        [JsonProperty("cargo", NullValueHandling = NullValueHandling.Ignore)]
        public long? Cargo { get; set; }

        [JsonProperty("autorizado", NullValueHandling = NullValueHandling.Ignore)]
        public string Autorizado { get; set; }

        [JsonProperty("a", NullValueHandling = NullValueHandling.Ignore)]
        public string A { get; set; }

        [JsonProperty("createdAt", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("updatedAt", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("__v", NullValueHandling = NullValueHandling.Ignore)]
        public long? V { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string IPedidoCosbiomeDbId { get; set; }
    }

    public partial class Direccion
    {
        [JsonProperty("tipo", NullValueHandling = NullValueHandling.Ignore)]
        public string Tipo { get; set; }

        [JsonProperty("domicilio", NullValueHandling = NullValueHandling.Ignore)]
        public string Domicilio { get; set; }

        [JsonProperty("colonia", NullValueHandling = NullValueHandling.Ignore)]
        public string Colonia { get; set; }

        [JsonProperty("ciudad", NullValueHandling = NullValueHandling.Ignore)]
        public string Ciudad { get; set; }

        [JsonProperty("estado", NullValueHandling = NullValueHandling.Ignore)]
        public string Estado { get; set; }

        [JsonProperty("codigoPostal", NullValueHandling = NullValueHandling.Ignore)]
        public string CodigoPostal { get; set; }

        [JsonProperty("cruces", NullValueHandling = NullValueHandling.Ignore)]
        public string Cruces { get; set; }
    }

    public partial class ProductosCompra
    {
        [JsonProperty("producto", NullValueHandling = NullValueHandling.Ignore)]
        public string Producto { get; set; }

        [JsonProperty("precio", NullValueHandling = NullValueHandling.Ignore)]
        public long? Precio { get; set; }

        [JsonProperty("cantidad", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Cantidad { get; set; }
    }

    public partial class IPedidoCosbiomeDb
    {
        public static IPedidoCosbiomeDb FromJson(string json)
        {
            return JsonConvert.DeserializeObject<IPedidoCosbiomeDb>(json, HttpPrueba.Converter.Settings);
        }
    }

    public static class Serialize
    {
        public static string ToJson(this IPedidoCosbiomeDb self)
        {
            return JsonConvert.SerializeObject(self, HttpPrueba.Converter.Settings);
        }
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t)
        {
            return t == typeof(long) || t == typeof(long?);
        }

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
